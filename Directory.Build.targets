<Project InitialTargets="VerifyProjectSettings;ShowBuildParameters">
    <Target Name="EnsureBuildOutputPaths" Condition="!EXISTS($(PackageOutputPath))" BeforeTargets="Build;Restore">
        <MakeDir Directories="$(PackageOutputPath)"/>
    </Target>

    <Target Name="ShowBuildParameters">
        <Message Importance="normal" Text="Build paths:" />
        <Message Importance="normal" Text="              BuildRootDir: $(BuildRootDir)" />
        <Message Importance="normal" Text="       BaseBuildOutputPath: $(BaseBuildOutputPath)" />
        <Message Importance="normal" Text="    BaseBuildOutputBinPath: $(BaseBuildOutputBinPath)" />
        <Message Importance="normal" Text="BaseIntermediateOutputPath: $(BaseIntermediateOutputPath)" />
        <Message Importance="normal" Text="                    IntDir: $(IntDir)" />
        <Message Importance="normal" Text="            BaseOutputPath: $(BaseOutputPath)" />
        <Message Importance="normal" Text="Versioning:" />
        <Message Importance="normal" Text="           FullBuildNumber: $(FullBuildNumber)"/>
        <Message Importance="normal" Text="            PackageVersion: $(PackageVersion)"/>
        <Message Importance="normal" Text="               FileVersion: $(FileVersion)"/>
        <Message Importance="normal" Text="           AssemblyVersion: $(AssemblyVersion)"/>
        <Message Importance="normal" Text="      InformationalVersion: $(InformationalVersion)"/>
        <Message Importance="normal" Text="                  Platform: $(Platform)"/>
        <Message Importance="normal" Text="             Configuration: $(Configuration)"/>
    </Target>

    <Target Name="VerifyProjectSettings" Condition="'$(MSBuildProjectExtension)'=='.csproj'">
        <!--
        Detect if something has this horrible non-feature enabled. It is a blight on the build that should never have been added,
        let alone used as the default for projects with no way to block/disable it all up...

        NOTE:
        .editorconfig in this repo includes `csharp_style_prefer_top_level_statements = false:error` to ensure that bad design choice isn't used either.

        NOTE:
        While the MSBuild `ImplicitUsings` property is banned from this repo, the C# language feature of global usings is NOT.
        The build property will auto include an invisible and undiscoverable (without looking up obscure documentation)
        set of namespaces that is NOT consistent or controlled by the developer. THAT is what is BAD/BROKEN about that feature.
        By banning it's use and then providing a `GlobalNamespaceImports.cs` source file with ONLY global using statements ALL of
        that is eliminated. Such use of the language feature restores FULL control and visibility of the namespaces to the developer,
        where it belongs. For a good explanation of this problem see: https://rehansaeed.com/the-problem-with-csharp-10-implicit-usings/.
        For an explanation of the benefits of the language feature see: https://www.hanselman.com/blog/implicit-usings-in-net-6
        -->
        <Error Condition="'$(ImplicitUsings)'!='disable'" Code="REPO001" Text="$(MSBuildProjectFile) - Projects in this repository MUST NOT have ImplicitUsings enabled!"/>

        <!--
        Until issue https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/3902 is resolved, this directly tests for the missing stylecop.json file.
        Given that was opened nearly a year ago and that it went 2 months to even get a comment about the cause, it seems unlikely that will receive a
        fix any time soon...
        -->
        <Error Code="REPO002" Condition="!Exists('$(MSBuildThisFileDirectory)stylecop.json')" Text="Missing StyleCop.Json file!"/>

        <!--
        Additional Repo specific checks go here...
        -->
    </Target>
</Project>
